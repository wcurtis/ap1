
/**
 * Shopify order
 * GET /admin/orders/#{id}.json
 * 
 * {
 *   "order": {
 *     "buyer_accepts_marketing": false,
 *     "cancel_reason": null,
 *     "cancelled_at": null,
 *     "cart_token": "68778783ad298f1c80c3bafcddeea02f",
 *     "checkout_token": null,
 *     "closed_at": null,
 *     "created_at": "2008-01-10T11:00:00-05:00",
 *     "currency": "USD",
 *     "email": "bob.norman@hostmail.com",
 *     "financial_status": "authorized",
 *     "fulfillment_status": null,
 *     "gateway": "authorize_net",
 *     "id": 450789469,
 *     "landing_site": "http://www.example.com?source=abc",
 *     "name": "#1001",
 *     "note": null,
 *     "number": 1,
 *     "reference": "fhwdgads",
 *     "referring_site": "http://www.otherexample.com",
 *     "source": null,
 *     "subtotal_price": "398.00",
 *     "taxes_included": false,
 *     "token": "b1946ac92492d2347c6235b4d2611184",
 *     "total_discounts": "0.00",
 *     "total_line_items_price": "398.00",
 *     "total_price": "409.94",
 *     "total_price_usd": "409.94",
 *     "total_tax": "11.94",
 *     "total_weight": 0,
 *     "updated_at": "2008-01-10T11:00:00-05:00",
 *     "user_id": null,
 *     "browser_ip": null,
 *     "landing_site_ref": "abc",
 *     "order_number": 1001,
 *     "discount_codes": [
 *       {
 *         "code": "TENOFF",
 *         "amount": "10.00"
 *       }
 *     ],
 *     "note_attributes": [
 *       {
 *         "name": "custom engraving",
 *         "value": "Happy Birthday"
 *       },
 *       {
 *         "name": "colour",
 *         "value": "green"
 *       }
 *     ],
 *     "processing_method": "direct",
 *     "checkout_id": null,
 *     "line_items": [
 *       {
 *         "fulfillment_service": "manual",
 *         "fulfillment_status": null,
 *         "grams": 200,
 *         "id": 466157049,
 *         "price": "199.00",
 *         "product_id": 632910392,
 *         "quantity": 1,
 *         "requires_shipping": true,
 *         "sku": "IPOD2008GREEN",
 *         "title": "IPod Nano - 8gb",
 *         "variant_id": 39072856,
 *         "variant_title": "green",
 *         "vendor": null,
 *         "name": "IPod Nano - 8gb - green",
 *         "variant_inventory_management": "shopify",
 *         "properties": [
 *           {
 *             "name": "Custom Engraving",
 *             "value": "Happy Birthday"
 *           }
 *         ]
 *       },
 *       {
 *         "fulfillment_service": "manual",
 *         "fulfillment_status": null,
 *         "grams": 200,
 *         "id": 518995019,
 *         "price": "199.00",
 *         "product_id": 632910392,
 *         "quantity": 1,
 *         "requires_shipping": true,
 *         "sku": "IPOD2008RED",
 *         "title": "IPod Nano - 8gb",
 *         "variant_id": 49148385,
 *         "variant_title": "red",
 *         "vendor": null,
 *         "name": "IPod Nano - 8gb - red",
 *         "variant_inventory_management": "shopify",
 *         "properties": [
 * 
 *         ]
 *       },
 *       {
 *         "fulfillment_service": "manual",
 *         "fulfillment_status": null,
 *         "grams": 200,
 *         "id": 703073504,
 *         "price": "199.00",
 *         "product_id": 632910392,
 *         "quantity": 1,
 *         "requires_shipping": true,
 *         "sku": "IPOD2008BLACK",
 *         "title": "IPod Nano - 8gb",
 *         "variant_id": 457924702,
 *         "variant_title": "black",
 *         "vendor": null,
 *         "name": "IPod Nano - 8gb - black",
 *         "variant_inventory_management": "shopify",
 *         "properties": [
 * 
 *         ]
 *       }
 *     ],
 *     "shipping_lines": [
 *       {
 *         "code": "Free Shipping",
 *         "price": "0.00",
 *         "source": "shopify",
 *         "title": "Free Shipping"
 *       }
 *     ],
 *     "tax_lines": [
 *       {
 *         "price": "11.94",
 *         "rate": 0.06,
 *         "title": "State Tax"
 *       }
 *     ],
 *     "payment_details": {
 *       "avs_result_code": null,
 *       "credit_card_bin": null,
 *       "cvv_result_code": null,
 *       "credit_card_number": "XXXX-XXXX-XXXX-4242",
 *       "credit_card_company": "Visa"
 *     },
 *     "billing_address": {
 *       "address1": "Chestnut Street 92",
 *       "address2": "",
 *       "city": "Louisville",
 *       "company": null,
 *       "country": "United States",
 *       "first_name": "Bob",
 *       "last_name": "Norman",
 *       "latitude": "45.41634",
 *       "longitude": "-75.6868",
 *       "phone": "555-625-1199",
 *       "province": "Kentucky",
 *       "zip": "40202",
 *       "name": "Bob Norman",
 *       "country_code": "US",
 *       "province_code": "KY"
 *     },
 *     "shipping_address": {
 *       "address1": "Chestnut Street 92",
 *       "address2": "",
 *       "city": "Louisville",
 *       "company": null,
 *       "country": "United States",
 *       "first_name": "Bob",
 *       "last_name": "Norman",
 *       "latitude": "45.41634",
 *       "longitude": "-75.6868",
 *       "phone": "555-625-1199",
 *       "province": "Kentucky",
 *       "zip": "40202",
 *       "name": "Bob Norman",
 *       "country_code": "US",
 *       "province_code": "KY"
 *     },
 *     "fulfillments": [
 *       {
 *         "created_at": "2013-03-04T15:32:33-05:00",
 *         "id": 255858046,
 *         "order_id": 450789469,
 *         "service": "manual",
 *         "status": "failure",
 *         "tracking_company": null,
 *         "updated_at": "2013-03-04T15:32:33-05:00",
 *         "tracking_number": "1Z2345",
 *         "tracking_numbers": [
 *           "1Z2345"
 *         ],
 *         "tracking_url": "http://www.google.com/search?q=1Z2345",
 *         "tracking_urls": [
 *           "http://www.google.com/search?q=1Z2345"
 *         ],
 *         "receipt": {
 *           "testcase": true,
 *           "authorization": "123456"
 *         },
 *         "line_items": [
 *           {
 *             "fulfillment_service": "manual",
 *             "fulfillment_status": null,
 *             "grams": 200,
 *             "id": 466157049,
 *             "price": "199.00",
 *             "product_id": 632910392,
 *             "quantity": 1,
 *             "requires_shipping": true,
 *             "sku": "IPOD2008GREEN",
 *             "title": "IPod Nano - 8gb",
 *             "variant_id": 39072856,
 *             "variant_title": "green",
 *             "vendor": null,
 *             "name": "IPod Nano - 8gb - green",
 *             "variant_inventory_management": "shopify",
 *             "properties": [
 *               {
 *                 "name": "Custom Engraving",
 *                 "value": "Happy Birthday"
 *               }
 *             ]
 *           }
 *         ]
 *       }
 *     ],
 *     "client_details": {
 *       "accept_language": null,
 *       "browser_ip": "0.0.0.0",
 *       "session_hash": null,
 *       "user_agent": null
 *     },
 *     "customer": {
 *       "accepts_marketing": false,
 *       "created_at": "2013-03-04T15:32:32-05:00",
 *       "email": "bob.norman@hostmail.com",
 *       "first_name": "Bob",
 *       "id": 207119551,
 *       "last_name": "Norman",
 *       "last_order_id": null,
 *       "note": null,
 *       "orders_count": 0,
 *       "state": "disabled",
 *       "total_spent": "0.00",
 *       "updated_at": "2013-03-04T15:32:32-05:00",
 *       "tags": "",
 *       "last_order_name": null
 *     }
 *   }
 * }
 */
{
  "order": {
    "type": "object",
    "children": {
      "buyer_accepts_marketing": {
        "type": "boolean"
      },
      "cancel_reason": {
        "type": "condition",                              // 'condition' evaluates the condition field, and uses the appropriate true/false field
        "condition": "@this.financial_status == 'canceled'",
        "true": {
          "type": "ipsum",
          "length": 50
        },
        "false": {                           // TODO: These are boolean results, what about if the result is a number? Oh, I guess type: 'eval' or something?
          "type": "null"
        }
      },
      "cancelled_at": {
        "type": "condition",
        "condition": "@this.financial_status == 'canceled'",
        "true": {
          "type": "timestamp",
          "min": "@this.created_at"         // Woah, for these dependencies we'll have to do a first pass to build a dependency tree so each field gets generated in the correct order
        },
        "false": {
          "type": "null"
        }
      },
      "cart_token": {
        "type": "alphanum",                 // Awwwww yeah! New type unlocked.
        "length": 32
      },
      "checkout_token": {                   // TODO: Not sure if this is correct, but for now, this is how it'd work
        "type": "condition",
        "condition": "['shipped', 'paid', 'closed'].indexOf(@this.financial_status)",    // IDEA: This should just be javascript, this way we can use 'in' 'contains', etc. Look into how mongodb allows for this
        "true": {
          "type": "alphanum",
          "length": 32
        },
        "false": {
          "type": "null"
        }
      },
      "closed_at": {
        "type": "condition",
        "condition": "@this.financial_status == 'closed'",
        "true": {
          "type": "timestamp",
          "min": "@this.created_at",
          "max": "@this.updated_at"       // TODO: This is interesting, will need a way to define updated_at as a range of time from created_at... hmmmm.
        },
        "false": {
          "type": "null"
        }
      },
      "created_at": {
        "type": "timestamp",
        "min": "2008-01-01"
      },
      "currency": {
        "type": "currencyCode"            // TODO: This will either have to be linked with the shipping address, or the store currency
      },
      "email": {
        "type": "email"
      },
      "financial_status": {
        "type": "string",
        "set": [
          "authorized",                   // TODO: Find out the complete array of options for this
          "declined",
          "paid"
        ]
      },
      "fulfillment_status": {             // TODO: Figure out what goes here
        "type": "null"
      },
      "gateway": {
        "type": "string",
        "set": [                          // TODO: Add other gateways
          "authorize_net"
        ]
      },
      "id": {
        "type": "shopifyId"               // @see the shopifyId custom type. This is how we keep DRY :)
      },
      "landing_site": {
        "type": "url"                     // TODO: This should be the store url + and endpoint, should support a storeUrl global variable, and way to append to a string within the same field
      },
      "name": {
        "type": "regex",
        "regex": "<TODO: regex that makes something like '#1001'"   // TODO: Learn regexes
      },
      "note": {
        "type": "mixed",
        "children": [
          {
            "type": "null",
            "ratio": 20
          },
          {
            "type": "ipsum",
            "ratio": 1                      // TODO: Find a way to specify this outside of this object itself, since an object shouldn't know about its parent (ie. if this was a link to another type, not possible)
          }
        ]
      },
      "number": {                           // TODO: Find out what goes here
        "type": "constant",                 // This is how a constant works
        "value": 1
      },
      "reference": {
        "type": "alpha",
        "length": 8
      },
      "referring_site": {
        "type": "url"
      },
      "source": {                           // TODO: Find out what goes here
        "type": "null"
      },
      "subtotal_price": {
        "type": "price",                    // Extends string, or should we have a 'format'/'datatype'/'cast' property to specify this. Eg. if we wanted price as a json numer instead of string.
        "min": 0.00,                        // Gets even crazier when the min and max are numbers
        "max": 1000.00
      },
      "taxes_included": {
        "type": "boolean"                   // TODO: find out how to make this constantly true or false
      },
      "token": {
        "type": "alphanum",                 // TODO: Just noticed this id doesn't have any capital letter. Should distinguis. Maybe alphanumLowercase
        "length": 32
      },
      "total_discounts": {
        "type": "price",
        "max": "@this.subtotal_price"       // TODO: May want to use a min(subtotal_price, 3.00) type function here. Gotta design that deal.
      },
      "total_line_items_price": {           // TODO: Duuuuude, all these line item/discounts/tax need to balance an equation! Dang, that's gonna be fun.. false.
        "type": "price"                     // TODO: Not even sure what to do here yet in terms of max/min
      },
      "total_price": {
        "type": "price"
      },
      "total_price_usd": {
        "type": "price"                     // TODO: This should be in some way a ratio of 'total_price'
      },
      "total_tax": {
        "type": "equation",
        "equation": "@this.total_price * @global.tax"   // TODO: We should either do this 'equation' bit or use a js eval type
      },                                                // Check out this @global biz
      "total_weight": {
        "type":"integer",
        "max": 5                                          // Max 5lbs for this store
      },
      "updated_at": {
        "type": "timestamp",
        "min": "@this.created_at",        // TODO: Would be cool to be able to specify a range of time this is from created_at.. eh, maybe we don't need it, could just default less than 'now'
      },
      "user_id": {
        "type": "null"                    // TORESEARCH
      },
      "browser_ip": {
        "type": "ip"
      },
      "landing_site_ref": {
        "type": "alpha",
        "length": 3
      },
      "order_number": {
        "type": "integer",
        "min": 0,
        "max": 2000                       // TODO: Looks like we need to add an incremental id here, could add "incremental" and "start" fields
      },
      "discount_codes": {
        "type": "array",
        "children": {                     // TODO: Not sure if this should always be an array or not
          "type": "object",
          "children": {
            "code": {
              "type": "string",
              "length": 5                 // Can we do a range or absolute value here? That would be cool.
            },
            "amount": {
              "type": "price",
              "max": 10                   // TODO: this needs to be less than total price and sum to discount line item, holy cow
            }
          }
        },
        "count": 1
      },
      "note_attributes": {
        "type": "array",
        "children": {                     // Maybe we call children 'subdocument', meaning it's never an array?
          "name": {
            "type": "ipsum",
            "length": 20
          },
          "value": {
            "type": "ipsum",
            "length": 20
          }
        },
        "min": 0,                         // This defines the range for number of items to add to this array
        "max": 3
      }

      // TODO: Complete the order structure (shouuld we name this a mold, or cookie cutter?)

    }
  }
}

/**
 * shopifyId
 */
{                                         // TODO: Decide how to store these custom types (type within the structure, or just in the db)
  "type": "integer",
  "min": "450000000",                     // TODO: This will be a challenge to handle incremental cases. No doubt we'll find a solution though.
  "max": "550000000"
}






